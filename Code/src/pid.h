#ifndef PID_H
#define PID_H

// Constants
// IR_OUT:
// 1 - left
// 2 - front left
// 3 - front right
// 4 - right

#include "mouse.h"
#define RIGHT_THRESHOLD 110
#define LEFT_THRESHOLD 110

#define THRESHOLD 200
#define NOLEFTWALL_THRESHOLD 500
#define NORIGHTWALL_THRESHOLD 470

#define KP 0.00205
//#define KD 0.250
#define KD 0.2

#define NOL_KP 0.00105
#define NOL_KD 0.300

#define NOR_KP 0.00285
#define NOR_KD 0.270

#define KI 0
#define ADJUST 600

// FOR LINEARIZATION
//#define L_TARGET 4.8 // the actual distance
//#define R_TARGET 4.8 // the actual distance
// right target 4.66
// left target 4.964

//#define KP 0.00095
//#define KD 0.215
//#define ADJUST 100

// PID CONSTANTS
//#define KP 400
//#define KD 22.5
//#define KI 0.55
//#define ADJUST 1

#ifndef HIGH
#define HIGH 1
#endif

#ifndef LOW
#define LOW 0
#endif

// FOR MAPPING SENSOR READINGS
#define IN_MIN 0
#define IN_MAX 1600
#define OUT_MAX 255
#define RATIO OUT_MAX/IN_MAX

/*****************************************************************************/
// Sensor-Distance Hashtable
/*****************************************************************************/
static float distance_RF[256] = {
	/* 0 ~ 7 */ 
	10.842,10.714,10.587,10.462,10.339,10.216,10.096,
	9.976,9.858,9.742,9.627,9.513,9.400,9.289,
	9.179,9.071,8.964,8.858,8.753,8.649,8.547,
	8.446,8.346,8.248,8.150,8.054,7.959,7.865,
	7.772,7.680,7.589,7.499,7.411,7.323,7.236,
	7.151,7.066,6.983,6.900,6.819,6.738,6.658,
	6.580,2.365,6.425,6.349,6.274,6.200,6.126,
	6.054,5.982,5.912,5.842,5.773,5.705,5.637,
	5.570,5.505,5.440,5.375,5.312,5.249,5.187,
	5.126,5.065,5.005,4.946,4.887,4.830,4.773,
	4.716,4.660,4.605,4.551,4.497,4.444,4.391,
	4.339,4.288,4.237,4.187,4.138,4.089,4.041,
	3.993,3.946,3.899,3.853,3.807,3.762,3.718,
	3.674,3.630,3.587,3.545,3.503,3.462,3.421,
	3.380,3.340,3.301,3.262,3.223,3.185,3.148,
	3.110,3.074,3.037,3.001,2.966,2.931,2.896,
	2.862,2.828,2.795,2.762,2.729,2.697,2.665,
	2.633,2.602,2.571,2.541,2.511,2.481,2.452,
	2.423,2.394,2.366,2.338,2.310,2.283,2.256,
	2.229,2.203,2.177,2.151,2.126,2.101,2.076,
	2.051,2.027,2.003,1.979,1.956,1.933,1.910,
	1.887,1.865,1.843,1.821,1.800,1.778,1.757,
	1.737,1.716,1.696,1.676,1.656,1.636,1.617,
	1.598,1.579,1.560,1.542,1.524,1.506,1.488,
	1.470,1.453,1.436,1.419,1.402,1.385,1.369,
	1.353,1.337,1.321,1.305,1.290,1.275,1.260,
	1.245,1.230,1.215,1.201,1.187,1.173,1.159,
	1.145,1.132,1.118,1.105,1.092,1.079,1.066,
	1.054,1.041,1.029,1.017,1.005,0.993,0.981,
	0.969,0.958,0.947,0.935,0.924,0.913,0.903,
	0.892,0.881,0.871,0.861,0.851,0.840,0.831,
	0.821,0.811,0.801,0.792,0.783,0.773,0.764,
	0.755,0.746,0.737,0.729,0.720,0.712,0.703,
	0.695,0.687,0.678,0.670,0.662,0.655,0.647,
	0.639,0.632,0.624,0.617,0.610,0.602,0.595,
	0.588,0.581,0.574,0.568,0.561,0.554,0.548,
	0.541,0.535,0.528,0.522
};

static float distance_LF[256] = {
	/* 0 ~ 10 */
	8.946,8.837,8.729,8.622,8.517,8.413,8.311,
	8.210,8.109,8.011,7.913,7.816,7.721,7.627,
	7.534,7.442,7.351,7.262,7.173,7.086,6.999,
	6.914,6.830,6.746,6.664,6.583,6.503,6.423,
	6.345,6.268,6.191,6.116,6.041,5.967,5.895,
	5.823,5.752,5.682,5.612,5.544,5.476,5.409,
	5.344,5.278,5.214,5.150,5.088,5.026,4.964,
	4.904,4.844,4.785,4.727,4.669,4.612,4.556,
	4.500,4.445,4.391,4.338,4.285,4.232,4.181,
	4.130,4.079,4.030,3.981,3.932,3.884,3.837,
	3.790,3.744,3.698,3.653,3.608,3.564,3.521,
	3.478,3.436,3.394,3.352,3.311,3.271,3.231,
	3.192,3.153,3.114,3.076,3.039,3.002,2.965,
	2.929,2.893,2.858,2.823,2.789,2.755,2.721,
  2.688,2.655,2.623,2.591,2.559,2.528,2.497,
	2.467,2.437,2.407,2.378,2.349,2.320,2.292,
	2.264,2.236,2.209,2.182,2.155,2.129,2.103,
	2.077,2.052,2.027,2.002,1.978,1.954,1.930,
	1.906,1.883,1.860,1.837,1.815,1.793,1.771,
	1.749,1.728,1.707,1.686,1.666,1.645,1.625,
	1.605,1.586,1.567,1.547,1.529,1.510,1.491,
	1.473,1.455,1.438,1.420,1.403,1.386,1.369,
	1.352,1.336,1.319,1.303,1.287,1.272,1.256,
	1.241,1.226,1.211,1.196,1.181,1.167,1.153,
	1.139,1.125,1.111,1.097,1.084,1.071,1.058,
	1.045,1.032,1.019,1.007,0.995,0.983,0.971,
	0.959,0.947,0.936,0.924,0.913,0.902,0.891,
	0.880,0.869,0.859,0.848,0.838,0.827,0.817,
	0.807,0.798,0.788,0.778,0.769,0.759,0.750,
	0.741,0.732,0.723,0.714,0.705,0.697,0.688,
	0.680,0.672,0.663,0.655,0.647,0.639,0.632,
	0.624,0.616,0.609,0.601,0.594,0.587,0.580,
	0.573,0.566,0.559,0.552,0.545,0.538,0.532,
	0.525,0.519,0.513,0.506,0.500,0.494,0.488,
	0.482,0.476,0.470,0.465,0.459,0.453,0.448,
	0.442,0.437,0.432,0.426,0.421,0.416,0.411,
	0.406,0.401,0.396,0.391
};

/*****************************************************************************/
// Functions
/*****************************************************************************/
float map_RF();
float map_LF();
void pid();
void pid_turn(uint16_t);

#endif // PID_H

